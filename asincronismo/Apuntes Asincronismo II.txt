Clase #2: Qué es el asincronismo 2/21 
Conceptos importantes para entender el asincronismo:
* Thread: Thread para Javascript permite realizar programación multihilos en este entorno. En realidad, simula la creación y ejecución de hilos, pero para el desarrollador es lo mismo. Ésto simplifica muchísimo la creación de aplicaciones Javascript.
* Bloqueante: Una llamada u operación bloqueante no devuelve el control a la aplicación hasta que se ha completado. Por tanto el thread queda bloqueado en estado de espera.
* No bloqueante: Una tarea no bloqueante se devuelve inmediatamente con independencia del resultado. Si se completó, devuelve los datos. Si no, un error.
* Síncrono: Las tareas se ejecutan de forma secuencial, se debe esperar a que se complete para continuar con la siguiente tarea.
* Asíncrono: Las tareas pueden ser realizadas más tarde, lo que hace posible que una respuesta sea procesada en diferido. La finalización de la operación I/O (entrada/salida) se señaliza más tarde, mediante un mecanismo específico como por ejemplo un callback, una promesa o un evento, lo que hace posible que la respuesta sea procesada en diferido.
* Paralelismo: El paralelismo es la ejecución simultánea de dos o más tareas. Algunas tareas se pueden dividir en partes más pequeñas que pueden ser resueltas simultáneamente.
* Concurrencia: La concurrencia es la capacidad de un algoritmo o programa para ejecutar más de una tarea a la vez. El concepto es similar al procesamiento paralelo, pero con la posibilidad de que muchos trabajos independientes hagan diferentes cosas a la vez en lugar de ejecutar el mismo trabajo.
* Eventloop o Loop de eventos: El bucle de eventos es un patrón de diseño que espera y distribuye eventos o mensajes en un programa.


Formas de manejar la asincronía en JavaScript:
* Callbacks: Una función que se pasa como argumento de otra función y que será invocada.
* Promesas: (implementado en ES6) Una promesa es una función no-bloqueante y asíncrona la cual puede retornar un valor ahora, en el futuro o nunca.
* Async / Await: (implementado en ES2017) Permite estructurar una función asincrónica sin bloqueo de una manera similar a una función sincrónica ordinaria.


En JavaScript casi todas las operaciones de I/O (Entrada y Salida) no se bloquean. A esto se le conoce como asincronismo. Lo único que no es procesado antes de que termine la operación son los callbacks, ya que éstos están amarrados a una operación y esperan a que sea finalizada para poder ejecutarse.


El asincronismo es una manera de aprovechar el tiempo y los recursos de la aplicación, ejecutando tareas y procesos mientras otros son resueltos en background (como la llegada de la información de una API), para posteriormente continuar con las tareas que requerían esa información que no tenías de manera instantánea.


Un ejemplo fácil de asincronismo vs sincronismo es invitar a unos amigos a una fiesta y ofrecer una parrillada. Primero decides colocar la carne y verduras a la parrilla y luego repartir bebidas y algo para picar (snacks). Si fuera una persona síncrona (Blocking) tendrías que esperar a que la comida de la parrilla esté cocinada y luego atender a los invitados. Pero si fuera una persona asíncrona (Non Blocking) luego de poner la carne al carbón, sacas las bebidas frías de la nevera y compartes con los invitados mientras se cocina la carne. La acción de que la comida en la parrillada esté lista sería un callback que está esperando que finalice el proceso para ejecutarse. Pero otros procesos (como compartir la velada con bebidas y algo de picar) ya podrían irse realizando.


________________
Clase #3: Event Loop
Para entender el Event Loop, en el siguiente GIF (fuente: aquí) se muestra que la primera tarea asignada (mostrar por Consola la palabra: “start”) pasa por el Call Stack luego se imprime en consola. Cuando el Call Stack tiene el “setTimeout” se debe esperar un periodo de tiempo en este caso 5 segundos para imprimir el mensaje: “Callback Function”, ahí es cuando vemos en Web APIs el timer. Mientras tanto, el código sigue corriendo a la siguiente tarea para imprimir en consola la palabra: “end”.


El Event Loop es la tarea asignada (en este ejemplo el “callbackFn()”) para mover del Task Queue al Stack, solo si el stack está vacío:


Javascript se organiza usando las siguientes estructuras de datos:


* Memory Heap: Región de memoria libre de gran tamaño, dedicada al alojamiento dinámico de objetos (asignado a un montículo). Es compartida por todo el programa y controlada por un recolector de basura que se encarga de liberar aquello que no se necesita, es decir de forma desorganizada se guarda información de las variables y del scope.
* Call Stack (pila LIFO: Last-in, First-out): Apila de forma organizada las instrucciones de nuestro programa. La pila de llamadas, se encarga de albergar las instrucciones que deben ejecutarse. Nos indica en que punto del programa estamos, por donde vamos.
* Task Queue (cola): Cada vez que nuestro programa recibe una notificación del exterior o de otro contexto distinto al de la aplicación, el mensaje se inserta en una cola de mensajes pendientes y se registra su callback correspondiente. El stack debe estar vacío para que esto suceda.
* Micro Task Queue: Aquí se agregan las promesas. Esta Queue es la que tiene mayor prioridad.
________________
  Clase #5: Configuración
Conceptos fundamentales antes de crear el proyecto:


* Web APIs JavaScript del lado del cliente: setTimeout, XMLHttpRequest, File Reader, DOM. Node: fs, https.
* API: El término API es una abreviatura de “Application Programming Interface” (Interfaz de programación de aplicaciones en español). Es un conjunto de rutinas que provee acceso a funciones de un determinado software.
* Hoisting: Sugiere que las declaraciones de variables y funciones son físicamente movidas al comienzo del código en tiempo de compilación.
* XML: Lenguaje de marcado creado para la transferencia de información, legible tanto para seres humanos como para aplicaciones informáticas, y basado en una sencillez extrema y una rígida sintaxis. Así como el HTML estaba basado y era un subconjunto de SGML, la reformulación del primero bajo la sintaxis de XML dio lugar al XHTML; XHTML es, por tanto, un subconjunto de XML.
* DOM: El DOM permite acceder y manipular las páginas XHTML como si fueran documentos XML. De hecho, DOM se diseñó originalmente para manipular de forma sencilla los documentos XML.
* Events: Comportamientos del usuario que interactúa con una página que pueden detectarse para lanzar una acción, como por ejemplo que el usuario haga click en un elemento (onclick), que elija una opción de un desplegable (onselect), que pase el ratón sobre un objeto (onmouseover), etc.
* Compilar: Compilar es generar código ejecutable por una máquina, que puede ser física o abstracta como la máquina virtual de Java.
* Transpilar: Transpilar es generar a partir de código en un lenguaje código en otro lenguaje. Es decir, un programa produce otro programa en otro lenguaje cuyo comportamiento es el mismo que el original.


Crear e inicializar un Proyecto:
* Tener instalado Visual Studio Code.
* Abrir la terminal (en Linux al presionar las teclas Ctrl + Alt + T).
* Para conocer donde estamos ubicados se escribe pwd y se da ENTER.
* Para ver las carpetas y archivos del lugar donde estamos, se escribe ls y se da ENTER.
* Para crear una carpeta se escribe mkdir nombre-de-la-carpeta y se da ENTER.
* Para entrar a una carpeta se escribe cd nombre-de-la-carpeta y se da ENTER.
* Si se quiere ir a la carpeta contenedora de la carpeta actual que estamos, se escribe cd … y se da ENTER.
* En linux para no escribir los comando de mkdir y cd, se escribe take nombre-de-la-carpeta y se da ENTER.
* Para crear un archivo se escribe touch nombre-del-archivo-extensión y se da ENTER.
* Para limpiar la pantalla en la terminal se escribe clear y se da ENTER.
* Si solo se quiere mover el scroll se presionan las teclas Ctrl + Alt + l
* Para iniciar el repositorio se escribe git init y se da ENTER.
* Vamos a inicializar el proyecto con npm, se escribe npm init y se da ENTER.
* Aparece el nombre del proyecto, si no se quiere modificar el nombre, se da ENTER.
* Aparece la versión del proyecto, si no se quiere modificar el número, se da ENTER.
* Aparece la descripción del proyecto, si se quiere modificar dejar vacío, se da ENTER.
* Lo mismo, dejar vacío: entry point, test command, git repository.
* En keywords se escribe las palabras claves como javascript y se da ENTER.
* En la licencia por defecto aparece la ISC, pero la más común es la MIT para compartir y poder comercializar después el producto.
* Por último, aparecen los datos ingresados (guardados en el archivo package.json) y si no hay que modificar, se escribe yes y se da ENTER.
* Para entrar al editor VSC se escribe code . y se da ENTER.
* Una vez dentro de VSC, en el panel izquierdo aparece el archivo package.json, crear una nueva carpeta llamada src donde contendrá nuestro código.
* Crear el archivo .gitignore (estará fuera de la carpeta src). En los sistemas Unix, dado que el archivo empieza con un punto, al abrir un explorador de archivos los toma como archivos ocultos y no son visibles. El contenido del archivo queda:  /node_modules/
* Para guardar los cambios de un archivo, presionar las teclas Ctrl + S
* Muy importante instalar la extensión Code Runner, presionar las teclas Ctrl + P y pegar: ext install formulahendry.code-runner y dar ENTER. Lo instala automáticamente (fuente: aquí).








________________
Clase #6: Qué son los Callbacks 6/21
Un Callback es una una función que se pasa como argumento de otra función y que será invocada.


Ejemplos:


* En VSC crear una carpeta dentro de la carpeta src llamada callback
* Crear dentro de la carpeta callback el archivo index.js
* Dentro de index.js se coloca la estructura de los que será un callback:
function sum(num1, num2){
    return num1 + num2;
}


function calc(num1, num2, callback) {
    return callback(num1, num2);
}; //No necesariamente se debe llamar callback


console.log(calc(2, 2, sum)); //sum debe estar sin () y sin argumentos
//


* Luego se selecciona el código y al dar click derecho, seleccionar Run Code (debe estar instalado la extensión Code Runner).
* Aparece abajo la consola con la salida de la suma de los 2 números.
* Para el segundo ejemplo, se tiene un setTimeout que funciona como un callback, en el código está configurado para imprimir el mensaje 2 segundos después de ejecutar el código con Run Code:
setTimeout(function (){
   console.log('Hola JavaScript');
}, 2000) 
//la función es anónima por eso no tiene nombre




En el tercer ejemplo tenemos un setTimeout con una función que se le pasa por argumento:


function gretting(name){
        console.log(`Hola ${name}`);
}


setTimeout(gretting, 2000, 'Maria'); //se pasa primero la función, de segundo el tiempo de espera y el argumento




Clase #7: XMLHTTPRequest 7/21
XMLHttpRequest es un objeto de JS que permite hacer peticiones hacia servicios en la nube(URLs o APIs).


Existen 5 estados en un llamado XMLHttpRequest:


0 → Se ha inicializado.
1 → Loading (cargando).
2 → Se ha cargado.
3 → Procesamiento si existe alguna descarga.
4 → Completado.


Métodos y propiedades:


xmlhttp.open() → Prepara la petición para ser enviada tomando tres parámetros: prótocolo, url, asíncrono (true).
xmlhttp.readyState → Retorna el estado de la petición.
xmlhttp.onreadystatechange → Un eventHandler que es llamado cuando la propiedad readyState cambia.
xmlhttp.status → Retorna el estado de la respuesta de la petición. (200,400,500)
xmlhttp.send() → Envía la petición.


Características del protocolo http:


Verbos: Los verbos indican acciones que están asociadas a peticiones y recursos, es decir, sirven para la manipulación de recursos cliente/servidor. Los Verbos http son:


GET → Solicita un recurso.
HEAD → Solicita un recurso pero sin retornar información, la estructura de esta petición es igual que get tanto en su headers como estatus. Es útil cuando vamos a utilizar API, para comprobar si lo que vamos a enviar esta correcto y puede ser procesado.
POST → Sirve para la creación de recursos en el servidor.
PUT → Actualiza por completo un recurso, reemplaza todas las representaciones actuales del recurso de destino con la carga útil de la petición.
PATCH → Actualiza parcialmente un recurso.
DELETE → Elimina un recurso.


Los códigos de estados del servidor:


El código de estado (status codes) sirve para describir el estado de la petición hecha al servidor.


1xx → Indican que la petición fue recibida por el servidor, pero está siendo procesada por el servidor.
2xx → Indican que la petición fue recibida, aceptada y procesada correctamente.
3xx → Indican que hay que tomar acciones adicionales para completar la solicitud.
4xx → Indican errores del lado del cliente que hizo mal una solicitud.
5xx → Indican errores del servidor. Suelen aparecer cuando existe un fallo en la ejecución en el servidor.


Los códigos más comunes a la hora de interactuar con una API son:


200 → OK → Indica que todo está correcto.
201 → Created → Todo está correcto cuando se hizo una solicitud POST, el recurso se creó y se guardó correctamente.
204 → No Content → Indica que la solicitud se completó correctamente pero no devolvió información. Este es común cuando se hacen peticiones con el verbo DELETE.
400 → Bad Request → Indica que algo está mal en la petición (no encontró algo).
401 → Unauthorized → Significa que antes de hacer una solicitud al servidor nos debemos autenticar.
403 → Forbidden → Indica que no tenemos acceso a ese recurso aunque se esté autenticado.
404 → Not Found → Indica que no existe el recurso que se está intentando acceder.
500 → Internal Server Error → Indica que algo falló, es un error que retorna el servidor cuando la solicitud no pudo ser procesada.


Fuente: aquí


Ejemplo en VSC:


Ir a la consola y ubicarnos en la carpeta del proyecto y escribir el comando para instalar el paquete XMLHttpRequest:
npm i xmlhttprequest
Ir al VSC y crear un archivo llamado challenge.js en la ruta src/callback. El archivo queda:


const XMLHttppRequest = require('xmlhttprequest').XMLHttpRequest;
const XMLHttppRequest = requiere('xmlhttprquest'); //llamado al XmlHttpRequest
const API = 'https://api.escuelajs.co/api/v1'; //API en mayúscula porque es una referencia que no va a cambiar


function fetchData(urlApi, callback){ //urlApi: no confundir y colocar API
        let xhttp = new XMLHttppRequest(); //referencia a new XMLHttpRequest


        xhttp.open('GET', urlApi, true); //petición "obtener" con true para habilitarlo
        xhttp.onreadystatechange = function(event) { //escucha diferentes estados de la solicitud y conocer cuando está disponible la información
        if(xhttp.readyState === 4) { //si el estado ha sido completada la llamada
                if(xhttp.status === 200 ){ //el servido responde de forma correcta
                        callback(null, JSON.parse(xhttp.responseText)); //dentro de xhttp.responseTex recibimos lo que entrega el servidor en texto y se hace la transformación en JSON
                }
        } else {
                const error = new Error('Error' + urlApi);
                return callback(error,null); //es null porque no se está regresando ningún dato
        }
        }
        xhttp.send();
}


La nueva forma de hacer peticiones a una API es el fetch.




________________
Clase #8: Fetch data 8/21
Para evitar la mala práctica de un Call Hell, no es recomendable exceder de 3 callback, para ello se utilizan las promesas o el Async Away.


Existen varios tipos de console, dependiendo del navegador, la fuente o el color cambian de acuerdo al tipo (fuente: aquí):
console.info("info"); //muestra un mensaje de información en la consola web
console.error("error"); //muestra mensaje de un error
console.warn("warn"); //muestra mensaje de advertencia
console.log("log"); //para mensajes generales de registro de información


Siguiendo con el proyecto:


En el archivo challenge.js se agrega el siguiente código:


fetchData(`${API}/products`, function (error1, data1) {
    if (error1) return console.error(error1); //si hay error, devuelve el error
    fetchData (`${API}/products/${data1[0].id}`, function(error2, data2){
        if(error2) return console.error(error2); //valida el error 2
        //se usa Optional chaining '?.' que es una forma segura de acceder a las propiedades de los objetos anidados, incluso si no existe una propiedad intermedia:
        fetchData(`${API}/categories/${data2?.category?.id}`, function(error3, data3){
            if(error3) return console.error(error3);
            //evitar el callback hell
            console.log(data1[0]);
            console.log(data2.title);
            console.log(data3.name);
        });
    });
});
Revisar que el código esté bien y seleccionar todo el código del archivo challenge.js y dar en Run Code. Abajo en consola debe salir la información solicitada.